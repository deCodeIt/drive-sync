{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": [
      "./tsconfig.json"
    ]
  },
  "plugins": [
    "jest",
    "@typescript-eslint"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ]    
    }
  ],
  "rules": {
    "@typescript-eslint/no-unsafe-argument": [
      "error"
    ],
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array",
        "readonly": "array"
      }
    ],
    "@typescript-eslint/no-for-in-array": [
      "off"
    ],
    "@typescript-eslint/await-thenable": [
      "error"
    ],
    "@typescript-eslint/ban-tslint-comment": [
      "error"
    ],
    "@typescript-eslint/consistent-indexed-object-style": [
      "off"
    ],
    "@typescript-eslint/consistent-type-definitions": [
      "off"
    ],
    "@typescript-eslint/consistent-type-exports": [
      "error",
      {
        "fixMixedExportsWithInlineTypeSpecifier": false
      }
    ],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer" : "type-imports",
        "disallowTypeAnnotations": true
      }
    ],
    "@typescript-eslint/explicit-function-return-type": [
      "warn"
    ],
    "@typescript-eslint/explicit-module-boundary-types": [
      "warn",
      {
        "allowArgumentsExplicitlyTypedAsAny": true
      }
    ],
    "@typescript-eslint/member-delimiter-style": [
      "error",
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        },
        "multilineDetection": "brackets"
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow"
      }
    ],
    "@typescript-eslint/no-empty-interface": [
      "error",
      {
        "allowSingleExtends": false
      }
    ],
    "@typescript-eslint/no-require-imports": [
      "error"
    ],
    "@typescript-eslint/no-this-alias": [
      "error",
      {
        "allowDestructuring": true, // Disallow `const { props, state } = this`; true by default
        "allowedNames": [ "self" ] // Allow `const self = this`; `[]` by default
      }
    ],
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
      "error"
    ],
    "@typescript-eslint/no-unsafe-member-access": [
      "warn"
    ],
    "@typescript-eslint/no-unsafe-assignment": [
      "warn"
    ],
    "@typescript-eslint/prefer-ts-expect-error": [
      "error"
    ],
    "@typescript-eslint/promise-function-async": [
      "error"
    ],
    "@typescript-eslint/require-array-sort-compare": [
      "warn"
    ],
    "@typescript-eslint/restrict-plus-operands": [ "error" ],
    "brace-style": [ "off" ],
    "@typescript-eslint/brace-style": [
      "error",
      "1tbs",
      {
        "allowSingleLine": false
      }
    ],
    "comma-dangle": [ "off" ],
    "@typescript-eslint/comma-dangle": [
      "error",
      {
        "enums": "always-multiline",
        "generics": "never",
        "tuples": "always-multiline",
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "always-multiline",
        "functions": "never"
      }
    ],
    "comma-spacing": [ "off" ],
    "@typescript-eslint/comma-spacing": [
      "error",
      {
        "before": false,
        "after": true
      }
    ],
    "comma-style": [ "error", "last" ],
    "indent": [ "off" ],
    "@typescript-eslint/indent": [
      "error",
      2,
      {
        "ignoredNodes": [
          "TemplateLiteral",
          "FunctionExpression > .params[decorators.length > 0]",
          "FunctionExpression > .params > :matches(Decorator, :not(:first-child))",
          "ClassBody.body > PropertyDefinition[decorators.length > 0] > .key"
        ],
        "SwitchCase": 1
      }
    ],
    "default-param-last": [ "off" ],
    "@typescript-eslint/default-param-last": [ "error" ],
    "func-call-spacing": [ "off" ],
    "@typescript-eslint/func-call-spacing": [
      "error",
      "never"
    ],
    "array-bracket-spacing": [
      "error",
      "always"
    ],
    "keyword-spacing": [ "off" ],
    "@typescript-eslint/keyword-spacing": [
      "error",
      {
        "before": true,
        "after": false,
        "overrides": {
          "case": { "after": true },
          "class": { "after": true },
          "const": { "after": true },
          "delete": { "after": true },
          "default": { "after": true },
          "do": { "after": true },
          "else": { "after": true },
          "export": { "after": true },
          "finally": { "after": true },
          "import": { "after": true },
          "in": { "after": true },
          "let": { "after": true },
          "new": { "after": true },
          "of": { "after": true },
          "return": { "after": true },
          "static": { "after": true },
          "try": { "after": true },
          "var": { "after": true },
          "with": { "after": true },
          "yield": { "after": true },
          "from": { "after": true },
          "type": { "after": true }
        }
      }
    ],
    "no-duplicate-imports": [ "off" ],
    "@typescript-eslint/no-duplicate-imports": [
      "error",
      {
        "includeExports": false
      }
    ],
    "no-extra-semi": [ "off" ],
    "@typescript-eslint/no-extra-semi": [
      "error"
    ],
    "no-magic-numbers": [ "off" ],
    "@typescript-eslint/no-magic-numbers": [ "off" ],
    "no-redeclare": [ "off" ],
    "@typescript-eslint/no-redeclare": [ "error" ],
    "no-shadow": [ "off" ],
    "@typescript-eslint/no-shadow": [ "error" ],
    "no-unused-vars": [ "off" ],
    "@typescript-eslint/no-unused-vars": [ "warn", {
      "varsIgnorePattern": "info",
      "argsIgnorePattern": "info"
    } ],
    "@typescript-eslint/no-explicit-any": [
      "warn"
    ],
    "no-throw-literal": [ "off" ],
    "@typescript-eslint/no-throw-literal": [ "error" ],
    "object-curly-spacing": [ "off" ],
    "@typescript-eslint/object-curly-spacing": [
      "error",
      "always",
      {
        "arraysInObjects": true,
        "objectsInObjects": true
      }
    ],
    "no-use-before-define": [ "off" ],
    "@typescript-eslint/no-use-before-define": [ "warn" ],
    "quotes": [ "off" ],
    "@typescript-eslint/quotes": [
      "error",
      "single"
    ],
    "require-await": [ "off" ],
    "@typescript-eslint/require-await": [ "error" ],
    "no-return-await": [ "off" ],
    "@typescript-eslint/return-await": [ "error" ],
    "semi": [ "off" ],
    "@typescript-eslint/semi": [
      "error",
      "always",
      {
        "omitLastInOneLineBlock": false
      }
    ],
    "no-trailing-spaces": [ "error" ],
    "switch-colon-spacing": [ "error" ],
    "arrow-spacing": [ "error" ],
    "space-before-blocks": [ "error" ],
    "space-before-function-paren": [ "off" ],
    "@typescript-eslint/space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "space-infix-ops": [ "off" ],
    "space-in-parens": [ "error", "always" ],
    "@typescript-eslint/space-infix-ops": [ "error" ]
  }
}